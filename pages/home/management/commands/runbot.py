from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from asgiref.sync import sync_to_async
from django.core.management.base import BaseCommand
from apps.catalog.models import TelegramUser
from django.db.utils import IntegrityError
import traceback

TOKEN = "7720459194:AAEVPPTVO3tzfRsXzR6Wq0fkVLpj5b8vfvg"
KEYWORD = "–∞–≤—Ç–æ–º–æ–±–∏–ª—å"

@sync_to_async
def user_exists(user_id):
    return TelegramUser.objects.filter(user_id=user_id).exists()

@sync_to_async
def create_user(user_id, username):
    return TelegramUser.objects.create(user_id=user_id, username=username)

WAITING_FOR_KEYWORD = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ üóùÔ∏è")
    return WAITING_FOR_KEYWORD

async def handle_keyword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    username = update.effective_user.username or ""
    message_text = update.message.text.strip().lower().replace("\u200b", "")

    print(f"[DEBUG] message_text: '{message_text}' | KEYWORD: '{KEYWORD}'")
    print(f"[DEBUG] —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {message_text == KEYWORD}")

    if message_text == KEYWORD:
        try:
            if await user_exists(chat_id):
                await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            else:
                await create_user(chat_id, username)
                await update.message.reply_text("üéâ –¢—ã —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê]: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –°–æ–æ–±—â–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return WAITING_FOR_KEYWORD

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ telegram-–±–æ—Ç–∞"

    def handle(self, *args, **kwargs):
        app = ApplicationBuilder().token(TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                WAITING_FOR_KEYWORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keyword),
                ],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        app.add_handler(conv_handler)
        app.run_polling()